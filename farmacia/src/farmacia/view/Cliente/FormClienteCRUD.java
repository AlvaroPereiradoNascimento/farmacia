/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package farmacia.view.Cliente;


import Verifica.CpfCnpjUtils;
import Verifica.DateValidator;
import Verifica.EmailValidator;
import farmacia.DAO.ClienteDAO;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.ClienteCpf;


/**
 *
 * @author Alvaro Pereira do Nascimento.
 */
public class FormClienteCRUD extends javax.swing.JFrame {

    /**
     * Cria novas formas FormClienteCRUD
     */
    public FormClienteCRUD() {
        initComponents();
    }
    DateValidator d;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelID = new javax.swing.JLabel();
        LabelNome = new javax.swing.JLabel();
        LabelTelefone = new javax.swing.JLabel();
        LabelEmail = new javax.swing.JLabel();
        LabelDtNasc = new javax.swing.JLabel();
        LabelTelefone3 = new javax.swing.JLabel();
        LabelTelefone4 = new javax.swing.JLabel();
        ButtonCadastra = new javax.swing.JButton();
        ButtonAltera = new javax.swing.JButton();
        ButtonExclui = new javax.swing.JButton();
        ButtonConsulta = new javax.swing.JButton();
        ButtonLimpar = new javax.swing.JButton();
        TextFieldID = new javax.swing.JTextField();
        TextFieldNome = new javax.swing.JTextField();
        TextFieldTelefone = new javax.swing.JTextField();
        TextFieldEmail = new javax.swing.JTextField();
        TextFieldDtNasc = new javax.swing.JTextField();
        TextFieldRG = new javax.swing.JTextField();
        TextFieldCPF = new javax.swing.JTextField();
        LabelCelular = new javax.swing.JLabel();
        TextFieldCelular = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelID.setText("ID:");

        LabelNome.setText("Nome:");

        LabelTelefone.setText("Telefone:");

        LabelEmail.setText("E-mail:");

        LabelDtNasc.setText("Dt de Nasc.:");

        LabelTelefone3.setText("RG:");

        LabelTelefone4.setText("CPF:");

        ButtonCadastra.setText("Cadastra");
        ButtonCadastra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCadastraActionPerformed(evt);
            }
        });

        ButtonAltera.setText("Altera");
        ButtonAltera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAlteraActionPerformed(evt);
            }
        });

        ButtonExclui.setText("Exclui");
        ButtonExclui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExcluiActionPerformed(evt);
            }
        });

        ButtonConsulta.setText("Consulta");
        ButtonConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConsultaActionPerformed(evt);
            }
        });

        ButtonLimpar.setText("Limpar");
        ButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonLimparActionPerformed(evt);
            }
        });

        TextFieldID.setEditable(false);
        TextFieldID.setBackground(new java.awt.Color(153, 153, 153));

        TextFieldNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldNomeFocusLost(evt);
            }
        });

        TextFieldTelefone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldTelefoneFocusLost(evt);
            }
        });

        TextFieldEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldEmailFocusLost(evt);
            }
        });

        TextFieldDtNasc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldDtNascFocusLost(evt);
            }
        });

        TextFieldRG.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldRGFocusLost(evt);
            }
        });

        TextFieldCPF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldCPFFocusLost(evt);
            }
        });

        LabelCelular.setText("Celular:");

        TextFieldCelular.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldCelularFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LabelID)
                            .addComponent(LabelNome))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LabelTelefone3)
                            .addComponent(LabelDtNasc)
                            .addComponent(LabelTelefone4)
                            .addComponent(LabelEmail)
                            .addComponent(LabelTelefone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TextFieldTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelCelular)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(TextFieldRG, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(TextFieldCPF, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                .addComponent(TextFieldDtNasc))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ButtonCadastra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonAltera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonExclui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonConsulta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonLimpar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelNome)
                    .addComponent(TextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTelefone)
                    .addComponent(TextFieldTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelCelular)
                    .addComponent(TextFieldCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelEmail)
                    .addComponent(TextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelDtNasc)
                    .addComponent(TextFieldDtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTelefone3)
                    .addComponent(TextFieldRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTelefone4)
                    .addComponent(TextFieldCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonCadastra)
                    .addComponent(ButtonAltera)
                    .addComponent(ButtonExclui)
                    .addComponent(ButtonConsulta)
                    .addComponent(ButtonLimpar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      ClienteDAO cliente;
    private void ButtonCadastraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCadastraActionPerformed
        // TODO add your handling code here:
        /**
        * Verificação de dados do funcionário para cadastro.
        * @author Hugo Barros
        * @implemented Alvaro Pereira do Nascimento
        */
        boolean valida = false;
        //verifica se campos estão vazios.
       if (!(TextFieldID.isEditable()) && (TextFieldNome.isEditable())){
            JOptionPane.showMessageDialog(this.TextFieldCPF,"Iniciando casdastro","Cadastro", JOptionPane.INFORMATION_MESSAGE);
            if (!CpfCnpjUtils.isValid(TextFieldCPF.getText())){
                JOptionPane.showMessageDialog(this.TextFieldCPF,"CPF não é Verdadeiro","CPF", JOptionPane.ERROR_MESSAGE);
                TextFieldCPF.setText(null);
                TextFieldCPF.requestFocus();
            }
            else if(!(EmailValidator.isEmailValid(TextFieldEmail.getText()))){
                JOptionPane.showMessageDialog(null,"Email cadastrado errado","Email inválido",JOptionPane.ERROR_MESSAGE);
                TextFieldEmail.setText(null);
                TextFieldEmail.requestFocus();
//            }else if (!d.data(TextFieldDtNasc.getText())){
//                JOptionPane.showMessageDialog(this.TextFieldDtNasc,"Data de nascimento inválida","Data de Nascimento",JOptionPane.ERROR_MESSAGE);
//                TextFieldDtNasc.setText(null);
//                TextFieldDtNasc.requestFocus();
            }else{
              ClienteCpf c;
                try {
                   c = new ClienteCpf(Integer.parseInt(TextFieldTelefone.getText()),Integer.parseInt(TextFieldCelular.getText()),Integer.parseInt(TextFieldID.getText()),TextFieldNome.getText(), TextFieldRG.getText(),TextFieldEmail.getText(), d.StringtoDate(TextFieldDtNasc.getText()));
                   valida = cliente.inserir(c);
                  if (valida)JOptionPane.showMessageDialog(this,"Cadastro efetuado com sucesso ","Cadastro efetuado",JOptionPane.INFORMATION_MESSAGE);
                else JOptionPane.showMessageDialog(this,"Cadastro não efetuado.","Cadastro não efetuado",JOptionPane.ERROR_MESSAGE);
                } catch (ParseException ex) {
                    Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                     JOptionPane.showMessageDialog(this.TextFieldDtNasc,"Data de nascimento inválida","Data de Nascimento",JOptionPane.ERROR_MESSAGE);
                    TextFieldDtNasc.setText(null);
                    TextFieldDtNasc.requestFocus();
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                }
                
            } 
       }else Editavel();
        

    }//GEN-LAST:event_ButtonCadastraActionPerformed

    private void ButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLimparActionPerformed
        // TODO add your handling code here:
        limpar();
        TextFieldNome.requestFocus();
        if ((TextFieldID.isEditable()) && !(TextFieldNome.isEditable())) Editavel();
    }//GEN-LAST:event_ButtonLimparActionPerformed

    private void TextFieldNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldNomeFocusLost
        // TODO add your handling code here:
        if (TextFieldNome.isEditable() && (!TextFieldID.isEditable())){
            if( TextFieldNome.getText().length() == 0 ){
                        JOptionPane.showMessageDialog(this.TextFieldNome, "Campo nome vazio.","Nome", JOptionPane.ERROR_MESSAGE);
                        TextFieldNome.requestFocus();
                    }
            else if(matchesOnlyText(TextFieldNome.getText())) {
                String nome = toTitledCase(TextFieldNome.getText());
                TextFieldNome.setText(nome);
                                    
            }else {
                JOptionPane.showMessageDialog(this.TextFieldNome, "Nome possui números ou dados inelegiveis","Nome com números.", JOptionPane.ERROR_MESSAGE);
                TextFieldNome.requestFocus();
                TextFieldNome.setText(null);
            }   
            
        }
    }//GEN-LAST:event_TextFieldNomeFocusLost

    private void TextFieldTelefoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldTelefoneFocusLost
        // TODO add your handling code here:
        if (TextFieldTelefone.isEditable()){
            if(TextFieldNome.getText().length() == 0 || (!( matchesOnlyText(TextFieldNome.getText())))){
                TextFieldNome.requestFocus();
            }
                else if(TextFieldTelefone.getText().length() == 0){
                    JOptionPane.showMessageDialog(this.TextFieldTelefone, "Campo Telefone Vazio.","Telefone", JOptionPane.ERROR_MESSAGE);
                    TextFieldTelefone.requestFocus();
                }else if (TextFieldTelefone.getText().length() != 10) {
                    JOptionPane.showMessageDialog(this.TextFieldTelefone,"Dados de telefone incorretos!","Telefone Incorreto", JOptionPane.ERROR_MESSAGE);
                    TextFieldTelefone.requestFocus();
                    TextFieldTelefone.setText(null);
                }
        }
    }//GEN-LAST:event_TextFieldTelefoneFocusLost

    private void TextFieldCelularFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldCelularFocusLost
        // TODO add your handling code here:
            if (TextFieldCelular.isEditable()){
                if( TextFieldTelefone.getText().length() != 0  && TextFieldTelefone.getText().length() == 10 ){

                if(TextFieldCelular.getText().length() == 0){
                JOptionPane.showMessageDialog(this.TextFieldCelular, "Campo Celular Vazio.","Celular", JOptionPane.ERROR_MESSAGE);
                TextFieldCelular.requestFocus();
                }else if (TextFieldCelular.getText().length() != 11) {
                JOptionPane.showMessageDialog(this.TextFieldCelular,"Dados de Celular incorretos!","Celular Incorreto", JOptionPane.ERROR_MESSAGE);
                TextFieldCelular.requestFocus();
                TextFieldCelular.setText(null);
                }

                }else TextFieldTelefone.requestFocus();
            }
        
    }//GEN-LAST:event_TextFieldCelularFocusLost

    private void TextFieldEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldEmailFocusLost
        // TODO add your handling code here:
        if (TextFieldEmail.isEditable()){
            String toLowerCase = TextFieldEmail.getText().toLowerCase();
            TextFieldEmail.setText(toLowerCase);
            if( TextFieldCelular.getText().length() != 0 && TextFieldCelular.getText().length() == 11){

                if(TextFieldEmail.getText().length() == 0){
                        JOptionPane.showMessageDialog(this.TextFieldEmail,"Campo email Vazio","Email",JOptionPane.ERROR_MESSAGE);
                        TextFieldEmail.requestFocus();
                }else if((TextFieldEmail.getText()!= null) && (!(EmailValidator.isEmailValid(TextFieldEmail.getText())))){
                        JOptionPane.showMessageDialog(this.TextFieldEmail,"Email cadastrado errado","Email inválido",JOptionPane.ERROR_MESSAGE);
                        TextFieldEmail.setText(null);
                        TextFieldEmail.requestFocus();
                }
            }else TextFieldCelular.requestFocus(); 
        }
    }//GEN-LAST:event_TextFieldEmailFocusLost

    private void TextFieldDtNascFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldDtNascFocusLost
        // TODO add your handling code here:
        if (TextFieldDtNasc.isEditable()){
            int date=0;
            if(  (TextFieldEmail.getText().length() != 0) && ((EmailValidator.isEmailValid(TextFieldEmail.getText())))){

                if (TextFieldDtNasc.getText().length()> 3 || TextFieldDtNasc.getText().length()< 11){
                    if(TextFieldDtNasc.getText().length()== 8){
                        try {
                          date = Integer.parseInt(TextFieldDtNasc.getText());
                            int ano = date%10000;
                            int dia = date/1000000;
                            date /= 10000;
                            int mes = date%100;
                            if (mes <10){
                              TextFieldDtNasc.setText(dia+"/0"+mes+"/"+ano);  
                            }
                           else TextFieldDtNasc.setText(dia+"/"+mes+"/"+ano);
                        } catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                           TextFieldDtNasc.requestFocus();
                           TextFieldDtNasc.setText("dd/mm/aaaa");
                            try {
                                Thread.sleep(5000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            }
                           TextFieldDtNasc.setText("dia/mes/ano");
                           TextFieldDtNasc.selectAll();
                        }
                    }else if (TextFieldDtNasc.getText().length()== 10){
                            if(!d.data(TextFieldDtNasc.getText()))
                               JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                               TextFieldDtNasc.requestFocus();
                               TextFieldDtNasc.setText("dd/mm/aaaa");
                        try {
                            Thread.sleep(5000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        }
                               TextFieldDtNasc.setText("dia/mes/ano");
                               TextFieldDtNasc.selectAll();
                    }else if (TextFieldDtNasc.getText().length()== 6){
                        try {
                            date = Integer.parseInt(TextFieldDtNasc.getText());
                            int ano = date%100;
                            int dia = date/10000;
                            date /= 100;
                            int mes = date%100;
                            if (ano < 100 && ano > 60 ) ano+=1900;
                            else ano += 2000;
                            TextFieldDtNasc.setText(dia+"/0"+mes+"/"+ano);
                        } catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                           TextFieldDtNasc.requestFocus();
                           TextFieldDtNasc.setText("dd/mm/aaaa");
                            try {
                                Thread.sleep(3000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            }
                           TextFieldDtNasc.setText("dia/mes/ano");
                           TextFieldDtNasc.selectAll();
                        }
                    }else if (TextFieldDtNasc.getText().length()== 4){
                            try {
                                date = Integer.parseInt(TextFieldDtNasc.getText());
                                int ano = date%100;
                                int dia = date/1000;
                                date /= 100;
                                int mes = date%10;
                                if (mes <10 && dia < 10&& (ano < 100 && ano > 60 )){
                                        ano+=1900;
                                        TextFieldDtNasc.setText("0"+dia+"/0"+mes+"/"+ano);  
                                    }
                            } catch (NumberFormatException e) {
                               JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                               TextFieldDtNasc.requestFocus();
                                TextFieldDtNasc.setText("dd/mm/aaaa");
                                try {
                                    Thread.sleep(3000);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                                }
                               TextFieldDtNasc.setText("dia/mes/ano");
                               TextFieldDtNasc.selectAll();
                            }

                        }else if (TextFieldDtNasc.getText().length()== 5){

                               JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                               TextFieldDtNasc.requestFocus();
                               TextFieldDtNasc.setText("dd/mm/aaaa");
                            try {
                                Thread.sleep(3000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            }
                               TextFieldDtNasc.setText("dia/mes/ano");
                               TextFieldDtNasc.selectAll();
                            }



                   else {
                        JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                        TextFieldDtNasc.requestFocus();
                        TextFieldDtNasc.setText("dia/mes/ano");
                        TextFieldDtNasc.selectAll();
                    }   
                }else {
                    JOptionPane.showMessageDialog(this.TextFieldDtNasc, "Campo data de nascimento com formato inválido.","Data de Nascimento", JOptionPane.ERROR_MESSAGE);
                    TextFieldDtNasc.requestFocus();
                     }
            }else TextFieldEmail.requestFocus();
        }    
    }//GEN-LAST:event_TextFieldDtNascFocusLost

    private void TextFieldRGFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldRGFocusLost
        // TODO add your handling code here:
        if (TextFieldRG.isEditable()){
            String toUpperCase = TextFieldRG.getText().toUpperCase();
            TextFieldRG.setText(toUpperCase);
            if( TextFieldDtNasc.getText().length() != 0  && TextFieldDtNasc.getText().length() == 10 ){
                if( TextFieldRG.getText().length() == 0 ){
                        JOptionPane.showMessageDialog(this.TextFieldRG, "Campo RG vazio.","RG", JOptionPane.ERROR_MESSAGE);
                        TextFieldRG.requestFocus();
                        TextFieldRG.requestFocus();
                    }
            }else TextFieldDtNasc.requestFocus();
        }
    }//GEN-LAST:event_TextFieldRGFocusLost

    private void TextFieldCPFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldCPFFocusLost
        // TODO add your handling code here:
        if(TextFieldRG.isEditable()){
            if( TextFieldRG.getText().length() != 0 ){
                if( TextFieldCPF.getText().length() == 0 ){
                     JOptionPane.showMessageDialog(this.TextFieldCPF, "Campo CPF vazio.","CPF", JOptionPane.ERROR_MESSAGE);
                     TextFieldCPF.requestFocus();
                     TextFieldCPF.requestFocus();
                 }
            }else TextFieldRG.requestFocus();
        }
    }//GEN-LAST:event_TextFieldCPFFocusLost

    private void ButtonConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConsultaActionPerformed
        // TODO add your handling code here:[
        
        limpar();
        int resposta;
        if (TextFieldID.isEditable() && (!TextFieldNome.isEditable())&& (TextFieldCPF.isEditable())){
           
            if (TextFieldCPF.getText()!= null || TextFieldID.getText()!= null){
                resposta = JOptionPane.showConfirmDialog(this.TextFieldID, "Voçê realmente deseja consultar cadastro do cliente", "Confirmação de Consulta de cliente" , JOptionPane.WARNING_MESSAGE);
                if (resposta == JOptionPane.YES_OPTION){
                    
                    // busca ID e/ou CPF no banco 
                     ClienteCpf a = null;
                    try {
                        if ((TextFieldID.getText()!= null) && (TextFieldCPF.getText()!= null)){
                            a = new ClienteCpf(Integer.parseInt(TextFieldCPF.getText()),Integer.parseInt(TextFieldID.getText()));
                            cliente.buscasCPFID(a);
                        }
                        if ((TextFieldID.getText()!= null) && (TextFieldCPF.getText()== null)){
                            a = new ClienteCpf(Integer.parseInt(TextFieldCPF.getText()),Integer.parseInt(TextFieldID.getText()));
                            cliente.buscar(a);
                        }
                        if((TextFieldID.getText()== null) && (TextFieldCPF.getText()!= null)){
                            a = new ClienteCpf(Integer.parseInt(TextFieldCPF.getText()),Integer.parseInt(TextFieldID.getText()));
                            cliente.buscar(a);
                        }
                        } catch (SQLException ex) {
                               Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                               JOptionPane.showMessageDialog(this,"Problema de conxão com o banco.\n"+ex,"Erro no acesso ao banco",JOptionPane.ERROR_MESSAGE);
                        } catch (ClassNotFoundException ex) {
                               Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                               JOptionPane.showMessageDialog(this,"Problema de acesso a classe do banco.\n"+ex,"Erro no acesso a classe banco",JOptionPane.ERROR_MESSAGE);
                           }
                    //retorna algo e mostra caso ache o cleinte informado.
                        if (a != null )mostra(a);
                        else  JOptionPane.showMessageDialog(this,"Cliente não encontrado","Cliente",JOptionPane.ERROR_MESSAGE);
                }
            }else JOptionPane.showMessageDialog(this.TextFieldID,"Campo ID e/ou CPF estão vazios","Busca inválida",JOptionPane.ERROR_MESSAGE);
        }else  Editavel();
    }//GEN-LAST:event_ButtonConsultaActionPerformed

    private void ButtonExcluiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExcluiActionPerformed
        // TODO add your handling code here:
        int resposta;
        if (TextFieldID.isEditable() && (!TextFieldNome.isEditable())){
            if (TextFieldID.getText()!= null ){
                resposta = JOptionPane.showConfirmDialog(this.TextFieldID, "Voçê realmente deseja cancelar cadastro do cliente", "Confirmação de exclusão de cliente" , JOptionPane.WARNING_MESSAGE);
                if (resposta == JOptionPane.YES_OPTION){
                    try {
                        int ID = Integer.parseInt(TextFieldID.getText());
                    } catch (NumberFormatException numberFormatException ) {
                        JOptionPane.showMessageDialog(this.TextFieldID,"ID informado não é válido","ID inválido",JOptionPane.ERROR_MESSAGE);
                    }
                    try {
                        boolean valida = cliente.excluir(null);
                        if (valida)JOptionPane.showMessageDialog(this,"Exclusão efetuada com sucesso ","Exclusão efetuada",JOptionPane.INFORMATION_MESSAGE);
                        else JOptionPane.showMessageDialog(this,"Exclusão não efetuada.","Exclusão não efetuada",JOptionPane.ERROR_MESSAGE);
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                    }
                       
                }
            }else JOptionPane.showMessageDialog(this.TextFieldID,"Campo ID esta Vazio","Campo Id esta Vazio",JOptionPane.ERROR_MESSAGE);
        }
 
    }//GEN-LAST:event_ButtonExcluiActionPerformed

    private void ButtonAlteraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAlteraActionPerformed
        // TODO add your handling code here:
        int resposta;
        if ((!TextFieldID.isEditable()) && (TextFieldNome.isEditable())){
            
            if (TextFieldID.getText()!= null ){
                resposta = JOptionPane.showConfirmDialog(this.TextFieldID, "Voçê realmente deseja Alterar cadastro do cliente", "Confirmação de Alteração de dados do cliente" , JOptionPane.WARNING_MESSAGE);
                if (resposta == JOptionPane.YES_OPTION){
                       int ID = 0;
                    try {
                        ID = Integer.parseInt(TextFieldID.getText());
                    } catch (NumberFormatException numberFormatException ) {
                        JOptionPane.showMessageDialog(this.TextFieldID,"ID informado não é válido","ID inválido",JOptionPane.ERROR_MESSAGE);
                    }
                    
                    
                       // busca ID no banco e trava o id liberando outros campos para alteração.
                    try {
                        if ((TextFieldID.getText()!= null) && (TextFieldCPF.getText()!= null)){
                            ClienteCpf a = new ClienteCpf(Integer.parseInt(TextFieldCPF.getText()),ID);
                            cliente.buscasCPFID(a);
                        }else if ((TextFieldID.getText()!= null) && (TextFieldCPF.getText()== null)){
                            ClienteCpf a = new ClienteCpf(Integer.parseInt(TextFieldCPF.getText()),ID);
                            cliente.buscar(a);
                        }else if((TextFieldID.getText()== null) && (TextFieldCPF.getText()!= null)){
                            ClienteCpf a = new ClienteCpf(Integer.parseInt(TextFieldCPF.getText()),ID);
                            cliente.buscar(a);
                        }
                        } catch (SQLException ex) {
                               Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                               JOptionPane.showMessageDialog(this,"Problema de conxão com o banco.\n"+ex,"Erro no acesso ao banco",JOptionPane.ERROR_MESSAGE);
                        } catch (ClassNotFoundException ex) {
                               Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                               JOptionPane.showMessageDialog(this,"Problema de acesso a classe do banco.\n"+ex,"Erro no acesso a classe banco",JOptionPane.ERROR_MESSAGE);
                           }
                        
                        ClienteCpf c;
                try {
                    c = new ClienteCpf(Integer.parseInt(TextFieldTelefone.getText()),Integer.parseInt(TextFieldCelular.getText()),Integer.parseInt(TextFieldCPF.getText()),Integer.parseInt(TextFieldID.getText()),TextFieldNome.getText(), TextFieldRG.getText(),TextFieldEmail.getText(), d.StringtoDate(TextFieldDtNasc.getText()));
                } catch (ParseException ex) {
                    Logger.getLogger(FormClienteCRUD.class.getName()).log(Level.SEVERE, null, ex);
                     JOptionPane.showMessageDialog(this.TextFieldDtNasc,"Data de nascimento inválida","Data de Nascimento",JOptionPane.ERROR_MESSAGE);
                    TextFieldDtNasc.setText(null);
                    TextFieldDtNasc.requestFocus();
                      // Solicita alteração do  banco 
                        
                    
                    // em caso de confirmação imprme
                    JOptionPane.showMessageDialog(this.TextFieldID,"Dados do cleinte foram alterados com sucesso ","Alteração com sucesso ",JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }else JOptionPane.showMessageDialog(this.TextFieldID,"Campo ID esta Vazio","Campo Id esta Vazio",JOptionPane.ERROR_MESSAGE);
        }else Editavel();
    }//GEN-LAST:event_ButtonAlteraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormClienteCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormClienteCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormClienteCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormClienteCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FormClienteCRUD().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAltera;
    private javax.swing.JButton ButtonCadastra;
    private javax.swing.JButton ButtonConsulta;
    private javax.swing.JButton ButtonExclui;
    private javax.swing.JButton ButtonLimpar;
    private javax.swing.JLabel LabelCelular;
    private javax.swing.JLabel LabelDtNasc;
    private javax.swing.JLabel LabelEmail;
    private javax.swing.JLabel LabelID;
    private javax.swing.JLabel LabelNome;
    private javax.swing.JLabel LabelTelefone;
    private javax.swing.JLabel LabelTelefone3;
    private javax.swing.JLabel LabelTelefone4;
    private javax.swing.JTextField TextFieldCPF;
    private javax.swing.JTextField TextFieldCelular;
    private javax.swing.JTextField TextFieldDtNasc;
    private javax.swing.JTextField TextFieldEmail;
    private javax.swing.JTextField TextFieldID;
    private javax.swing.JTextField TextFieldNome;
    private javax.swing.JTextField TextFieldRG;
    private javax.swing.JTextField TextFieldTelefone;
    // End of variables declaration//GEN-END:variables

    /**
     * limpas todos os campos de texto.
     */
    private void limpar() {
        TextFieldNome.setText(null);
        TextFieldCPF.setText(null);
        TextFieldDtNasc.setText(null);
        TextFieldEmail.setText(null);
        TextFieldRG.setText(null);
        TextFieldTelefone.setText(null); 
        TextFieldCelular.setText(null); 
        TextFieldID.setText(null); 
    }
    /**
     * Deixar campos editaveis de acordo com padrão
     */
    public void Editavel(){
            if (!(TextFieldID.isEditable()) && (TextFieldNome.isEditable())){
                TextFieldID.setBackground(Color.white);
                TextFieldID.setEditable(true);
                TextFieldNome.setBackground(Color.gray);  
                TextFieldNome.setEditable(false);
                TextFieldTelefone.setBackground(Color.gray);  
                TextFieldTelefone.setEditable(false);
                TextFieldCelular.setBackground(Color.gray);  
                TextFieldCelular.setEditable(false);
                TextFieldEmail.setBackground(Color.gray);  
                TextFieldEmail.setEditable(false);
                TextFieldDtNasc.setBackground(Color.gray);  
                TextFieldDtNasc.setEditable(false);
                TextFieldRG.setBackground(Color.gray);  
                TextFieldRG.setEditable(false);

            }else {
                TextFieldID.setBackground(Color.gray);
                TextFieldID.setEditable(false);
                TextFieldNome.setBackground(Color.white);  
                TextFieldNome.setEditable(true);
                TextFieldTelefone.setBackground(Color.white);  
                TextFieldTelefone.setEditable(true);
                TextFieldCelular.setBackground(Color.white);  
                TextFieldCelular.setEditable(true);
                TextFieldEmail.setBackground(Color.white);  
                TextFieldEmail.setEditable(true);
                TextFieldDtNasc.setBackground(Color.white);  
                TextFieldDtNasc.setEditable(true);
                TextFieldRG.setBackground(Color.white);  
                TextFieldRG.setEditable(true);
            }

        }
   public boolean matchesOnlyText(String text) {
    return text.matches("[A-Z_a-z_À-ú\\s\\p{L}]+");
    }
    /**
     *
     * @param str
     * @return  primeira letra de cada palavra com em maiuscula exceto para sílabas
     */
    public static String toTitledCase(String str){

    String[] words = str.split(" ");
    StringBuilder sb = new StringBuilder();
  
    for(int i = 0; i < words.length; i++){
        String[] word= words[i].split("\\s");
        if (words[i].length() > 2){
            for (int y = 0;y<word.length;y++){
            sb.append(word[y].substring(0, 1).toUpperCase() + word[y].substring(1).toLowerCase());
            sb.append(" ");  
        }
        } else {
            sb.append(words[i]);
            sb.append(" ");      
        }
    }

    return sb.toString().substring (0, sb.length() - 1);
    }
    public void mostra (ClienteCpf c){
        TextFieldID.setText(String.valueOf(c.getId()));
        TextFieldNome.setText(c.getNome());
        TextFieldCelular.setText(String.valueOf(c.getCelular()));
        TextFieldEmail.setText(c.getEmail());
        TextFieldDtNasc.setText(String.valueOf(c.getDatanasc()));
        TextFieldRG.setText(c.getRg());
    }
}

