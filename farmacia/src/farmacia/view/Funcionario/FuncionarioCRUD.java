/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package farmacia.view.Funcionario;
import Verifica.DateValidator;
import Verifica.IsTrue;
import farmacia.DAO.FuncionarioDAO;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Atendente;
import model.Funcionario;
import model.Gerente;


/**
 *
 * @author Alvaro Pereira do Contratação 
 */
@SuppressWarnings("serial")
public class FuncionarioCRUD extends javax.swing.JFrame {
    

    /**
     * Creates new form FuncionárioCRUD
     */
    public FuncionarioCRUD() {
        initComponents();
    }
    DateValidator d = new DateValidator();
    FuncionarioDAO funcionario = new FuncionarioDAO();
    Funcionario f;
    Gerente g;
    Atendente a;
    IsTrue t = new IsTrue();
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroupFuncionario = new javax.swing.ButtonGroup();
        buttonGroupGerente = new javax.swing.ButtonGroup();
        LabelID = new javax.swing.JLabel();
        TextFieldID = new javax.swing.JTextField();
        LabelNomeUsuario = new javax.swing.JLabel();
        TextFieldNomeUsuario = new javax.swing.JTextField();
        LabelNome = new javax.swing.JLabel();
        TextFieldNome = new javax.swing.JTextField();
        LabelDataAdmissao = new javax.swing.JLabel();
        TextFieldDtAdm = new javax.swing.JTextField();
        LabelSalario = new javax.swing.JLabel();
        TextFieldSalario = new javax.swing.JTextField();
        LabelSenha = new javax.swing.JLabel();
        PasswordFieldSenha = new javax.swing.JPasswordField();
        RadioButtonFuncionario = new javax.swing.JRadioButton();
        RadioButtonGerente = new javax.swing.JRadioButton();
        ButtonCadastra = new javax.swing.JButton();
        ButtonAltera = new javax.swing.JButton();
        ButtonExclui = new javax.swing.JButton();
        ButtonConsulta = new javax.swing.JButton();
        ButtonLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro de funcionários");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(214748, 214748));
        setMinimumSize(new java.awt.Dimension(470, 350));
        setName("Funcionarios"); // NOI18N
        setResizable(false);

        LabelID.setText("ID:");

        TextFieldID.setEditable(false);
        TextFieldID.setBackground(java.awt.Color.gray);

        LabelNomeUsuario.setText("Nome do Usuário:");

        TextFieldNomeUsuario.setEditable(false);
        TextFieldNomeUsuario.setBackground(java.awt.Color.gray);
        TextFieldNomeUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextFieldNomeUsuarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldNomeUsuarioFocusLost(evt);
            }
        });

        LabelNome.setText("Nome:");

        TextFieldNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldNomeFocusLost(evt);
            }
        });

        LabelDataAdmissao.setText("Data de admissão:");

        TextFieldDtAdm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextFieldDtAdmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldDtAdmFocusLost(evt);
            }
        });

        LabelSalario.setText("Salário:");

        TextFieldSalario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldSalarioFocusLost(evt);
            }
        });

        LabelSenha.setText("Senha:");

        PasswordFieldSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PasswordFieldSenhaFocusLost(evt);
            }
        });

        RadioButtonFuncionario.setText("Atendente");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, buttonGroupFuncionario, org.jdesktop.beansbinding.ELProperty.create("${selection.pressed}"), RadioButtonFuncionario, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        RadioButtonFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonFuncionarioActionPerformed(evt);
            }
        });

        RadioButtonGerente.setText("Gerente");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, buttonGroupGerente, org.jdesktop.beansbinding.ELProperty.create("${selection.pressed}"), RadioButtonGerente, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        RadioButtonGerente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonGerenteActionPerformed(evt);
            }
        });

        ButtonCadastra.setText(" Cadastrar");
        ButtonCadastra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCadastraActionPerformed(evt);
            }
        });

        ButtonAltera.setText("Alterar");
        ButtonAltera.setToolTipText("");
        ButtonAltera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAlteraActionPerformed(evt);
            }
        });

        ButtonExclui.setText("Excluir");
        ButtonExclui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExcluiActionPerformed(evt);
            }
        });

        ButtonConsulta.setText("Consulta");
        ButtonConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConsultaActionPerformed(evt);
            }
        });

        ButtonLimpar.setText("Limpar");
        ButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelNomeUsuario)
                    .addComponent(LabelNome)
                    .addComponent(LabelDataAdmissao)
                    .addComponent(LabelSalario)
                    .addComponent(LabelSenha)
                    .addComponent(LabelID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PasswordFieldSenha)
                        .addGap(132, 132, 132))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TextFieldID)
                        .addGap(122, 122, 122))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TextFieldDtAdm, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextFieldSalario, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(132, 132, 132))
                    .addComponent(TextFieldNome)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TextFieldNomeUsuario)
                        .addGap(49, 49, 49)))
                .addGap(100, 100, 100))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonCadastra, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonAltera)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButtonExclui, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonConsulta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonLimpar)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(RadioButtonFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(RadioButtonGerente, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                .addGap(171, 171, 171))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelID)
                    .addComponent(TextFieldID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelNomeUsuario)
                    .addComponent(TextFieldNomeUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldNome)
                    .addComponent(LabelNome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelDataAdmissao)
                    .addComponent(TextFieldDtAdm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldSalario)
                    .addComponent(LabelSalario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelSenha)
                    .addComponent(PasswordFieldSenha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RadioButtonFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RadioButtonGerente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonCadastra)
                    .addComponent(ButtonAltera)
                    .addComponent(ButtonExclui)
                    .addComponent(ButtonConsulta)
                    .addComponent(ButtonLimpar))
                .addGap(26, 26, 26))
        );

        bindingGroup.bind();

        setSize(new java.awt.Dimension(475, 288));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void RadioButtonFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonFuncionarioActionPerformed
        // TODO add your handling code here:,
        if (RadioButtonGerente.isSelected()){
        RadioButtonGerente.setSelected(false);
        }
    }//GEN-LAST:event_RadioButtonFuncionarioActionPerformed

    private void RadioButtonGerenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonGerenteActionPerformed
        // TODO add your handling code here:
        if (RadioButtonFuncionario.isSelected()){
        RadioButtonFuncionario.setSelected(false);
        }
    }//GEN-LAST:event_RadioButtonGerenteActionPerformed

    private void TextFieldNomeUsuarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldNomeUsuarioFocusLost
        // TODO add your handling code here:
        if (!TextFieldNomeUsuario.isEditable()){
            if (TextFieldNome.getText().length() != 0 ){
                String nome = GeraUsuario(TextFieldNome.getText());
                TextFieldNomeUsuario.setText(null);
                List<Funcionario> vfuncionarios = new ArrayList<>();
                try {
                    System.out.println("efetua busca por " + nome);
                    vfuncionarios = funcionario.listargera(nome);
                } catch (SQLException ex) {
                    Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                } catch (ClassNotFoundException ex) {
                     JOptionPane.showMessageDialog(this,"Problema de conversão.\n"+ ex,"erro conversão",JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(vfuncionarios.size()> 0){
                    int i = vfuncionarios.size() ;
                    TextFieldNomeUsuario.setText(nome+i);
                }else TextFieldNomeUsuario.setText(nome);
                TextFieldNome.requestFocus();
                if(TextFieldNome.getText().length() == 0 )TextFieldNome.requestFocus();
                else if(TextFieldDtAdm.getText().length() == 0) TextFieldDtAdm.requestFocus();
                else if(TextFieldSalario.getText().length() == 0)TextFieldSalario.requestFocus();
            }else TextFieldNome.requestFocus();
        }
    }//GEN-LAST:event_TextFieldNomeUsuarioFocusLost

    private void TextFieldNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldNomeFocusLost
        // TODO add your handling code here:
        if (TextFieldNome.isEditable() && (!TextFieldID.isEditable())){
            if( TextFieldNome.getText().length() == 0 ){
                        JOptionPane.showMessageDialog(this.TextFieldNome, "Campo nome vazio.","Nome", JOptionPane.ERROR_MESSAGE);
                        TextFieldNome.requestFocus();
                    }
            else if(matchesOnlyText(TextFieldNome.getText())) {
                String nome = toTitledCase(TextFieldNome.getText());
                TextFieldNome.setText(nome);
                if(TextFieldNomeUsuario.getText().length() == 0 )TextFieldNomeUsuario.requestFocus();
                
                                    
            }else {
                JOptionPane.showMessageDialog(this.TextFieldNome, "Nome possui números ou dados inelegiveis","Nome com números.", JOptionPane.ERROR_MESSAGE);
                TextFieldNome.requestFocus();
                TextFieldNome.setText(null);
            }   
            
        }
        
    }//GEN-LAST:event_TextFieldNomeFocusLost

    private void TextFieldDtAdmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldDtAdmFocusLost
        // TODO add your handling code here:
        if (TextFieldDtAdm.isEditable()){
            int date=0;
            if(TextFieldNome.getText().length() != 0&& TextFieldNomeUsuario.getText().length()!= 0){
                   if (TextFieldDtAdm.getText().length()> 3 || TextFieldDtAdm.getText().length()< 11){
                    if(TextFieldDtAdm.getText().length()== 8){
                        try {
                          date = Integer.parseInt(TextFieldDtAdm.getText());
                            int ano = date%10000;
                            int dia = date/1000000;
                            date /= 10000;
                            int mes = date%100;
                            if (mes <10){
                              TextFieldDtAdm.setText(dia+"/0"+mes+"/"+ano);  
                            }
                           else TextFieldDtAdm.setText(dia+"/"+mes+"/"+ano);
                        }catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                           TextFieldDtAdm.requestFocus();
                           TextFieldDtAdm.setText("dd/mm/aaaa");
                           TextFieldDtAdm.setText("dia/mes/ano");
                           TextFieldDtAdm.selectAll();
                        }
                    }else if (TextFieldDtAdm.getText().length()== 10){
                            if(!d.data(TextFieldDtAdm.getText())){
                               JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                               TextFieldDtAdm.requestFocus();
                               TextFieldDtAdm.setText("dd/mm/aaaa");
                               TextFieldDtAdm.setText("dia/mes/ano");
                               TextFieldDtAdm.selectAll();
                            }
                    }else if (TextFieldDtAdm.getText().length()== 6){
                        try {
                            date = Integer.parseInt(TextFieldDtAdm.getText());
                            int ano = date%100;
                            int dia = date/10000;
                            date /= 100;
                            int mes = date%100;
                            if (ano < 100 && ano > 60 ) ano+=1900;
                            else ano += 2000;
                            TextFieldDtAdm.setText(dia+"/0"+mes+"/"+ano);
                        } catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                           TextFieldDtAdm.requestFocus();
                           TextFieldDtAdm.setText("dd/mm/aaaa");
                           TextFieldDtAdm.setText("dia/mes/ano");
                           TextFieldDtAdm.selectAll();
                        }
                    }else if (TextFieldDtAdm.getText().length()== 4){
                        try {
                            date = Integer.parseInt(TextFieldDtAdm.getText());
                            int ano = date%100;
                            int dia = date/1000;
                            date /= 100;
                            int mes = date%10;
                            if (mes <10 && dia < 10&& (ano < 100 && ano > 60 )){
                                    ano+=1900;
                                    TextFieldDtAdm.setText("0"+dia+"/0"+mes+"/"+ano);  
                                }
                        } catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                           TextFieldDtAdm.requestFocus();
                           TextFieldDtAdm.setText("dd/mm/aaaa");
                           TextFieldDtAdm.setText("dia/mes/ano");
                           TextFieldDtAdm.selectAll();
                        }

                    }else if (TextFieldDtAdm.getText().length()== 5){
                       JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                       TextFieldDtAdm.requestFocus();
                       TextFieldDtAdm.setText("dd/mm/aaaa");
                       TextFieldDtAdm.setText("dia/mes/ano");
                       TextFieldDtAdm.selectAll();
                    }else {
                        JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                        TextFieldDtAdm.requestFocus();
                        TextFieldDtAdm.setText("dia/mes/ano");
                        TextFieldDtAdm.selectAll();
                    }   
                    }else {
                    JOptionPane.showMessageDialog(this.TextFieldDtAdm, "Campo data de contratação  com formato inválido.","Data de Contratação ", JOptionPane.ERROR_MESSAGE);
                    TextFieldDtAdm.requestFocus();
                     } 
                }else if(TextFieldNome.getText().length() == 0) TextFieldNomeUsuario.requestFocus();
                    else TextFieldNome.requestFocus();
            }
       
    }//GEN-LAST:event_TextFieldDtAdmFocusLost

    private void TextFieldSalarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldSalarioFocusLost
        // TODO add your handling code here:
        if (TextFieldSalario.isEditable()){
            if (TextFieldDtAdm.getText().length()!= 0 && TextFieldNomeUsuario.getText().length() != 0){
                if (TextFieldSalario.getText().length() != 0){
                    if (ConverteVirgula(TextFieldSalario.getText())== 0.0){
                        JOptionPane.showMessageDialog(this.TextFieldSalario, "Campo salário possui dados inválidos.","Salário", JOptionPane.ERROR_MESSAGE);
                        TextFieldSalario.requestFocus();
                    }else {
                        double registra = ConverteVirgula(TextFieldSalario.getText());
                        TextFieldSalario.setText(String.valueOf(registra));                        
                    }
                }else {
                    JOptionPane.showMessageDialog(this.TextFieldSalario, "Campo salário esta vazio.","Salário", JOptionPane.ERROR_MESSAGE);
                    TextFieldSalario.requestFocus();
                    }   
            }else {
                if(TextFieldNomeUsuario.getText() == null )TextFieldNomeUsuario.requestFocus();
                else TextFieldDtAdm.requestFocus();
            }
        }
    }//GEN-LAST:event_TextFieldSalarioFocusLost

    private void PasswordFieldSenhaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PasswordFieldSenhaFocusLost
        // TODO add your handling code here:
        if (PasswordFieldSenha.isEditable()){
             if (TextFieldSalario.getText().length()!= 0){
                 if (PasswordFieldSenha.getPassword() == null ){
                     JOptionPane.showMessageDialog(this.PasswordFieldSenha, "Campo senha esta vazio.","Senha", JOptionPane.ERROR_MESSAGE);
                    PasswordFieldSenha.requestFocus();
                 }
             }else  TextFieldSalario.requestFocus();
        }
    }//GEN-LAST:event_PasswordFieldSenhaFocusLost

    private void TextFieldNomeUsuarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldNomeUsuarioFocusGained
        // TODO add your handling code here:
        if (!TextFieldNomeUsuario.isEditable()){
            if(TextFieldNome.getText().length() == 0 )TextFieldNome.requestFocus();
            else if(TextFieldDtAdm.getText().length() == 0) TextFieldDtAdm.requestFocus();
            else if(TextFieldSalario.getText().length() == 0)TextFieldSalario.requestFocus();
        }
    }//GEN-LAST:event_TextFieldNomeUsuarioFocusGained

    private void ButtonCadastraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCadastraActionPerformed
        // TODO add your handling code here:
        if (!(TextFieldID.isEditable()) && (TextFieldNome.isEditable())){
            boolean registrado = false;
            JOptionPane.showMessageDialog(this,"Iniciando casdastro","Cadastro", JOptionPane.INFORMATION_MESSAGE);
            if (!d.data(TextFieldDtAdm.getText())){
                JOptionPane.showMessageDialog(this.TextFieldDtAdm,"Data de nascimento inválida","Data de Nascimento",JOptionPane.ERROR_MESSAGE);
                TextFieldDtAdm.setText(null);
                TextFieldDtAdm.requestFocus();
            }else{
                registrado = cadastra();
               if (registrado)JOptionPane.showMessageDialog(this,"Cadastro efetuado com sucesso ","Cadastro efetuado",JOptionPane.INFORMATION_MESSAGE);
               else JOptionPane.showMessageDialog(this,"Cadastro não efetuado.","Cadastro não efetuado",JOptionPane.ERROR_MESSAGE);
                
            }
        }
        
    }//GEN-LAST:event_ButtonCadastraActionPerformed

    private void ButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLimparActionPerformed
        // TODO add your handling code here:
        if (TextFieldID.isEditable() && TextFieldNomeUsuario.isEditable() && !TextFieldNome.isEditable() )Editavel();
        limpar();
        ButtonCadastra.setEnabled(true);
        ButtonConsulta.setEnabled(true);
        ButtonAltera.setEnabled(false);
        ButtonExclui.setEnabled(false);
    }//GEN-LAST:event_ButtonLimparActionPerformed

    private void ButtonConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConsultaActionPerformed
        // TODO add your handling code here:
        int resposta;
        if (TextFieldID.isEditable() && TextFieldNomeUsuario.isEditable() && !TextFieldNome.isEditable() ){
            if (TextFieldID.getText() != null && TextFieldNomeUsuario.getText() != null){
                resposta = JOptionPane.showConfirmDialog(this.TextFieldID, "Voçê realmente deseja consultar cadastro do funcionário.", "Confirmação de Consulta de funcionário" , JOptionPane.WARNING_MESSAGE);
                if (resposta == JOptionPane.YES_OPTION){
                    Funcionario buscarfunc = null;
                        try {
                            if ((TextFieldID.getText().length() != 0) && (TextFieldNomeUsuario.getText().length() != 0)){
                             // busca por nome de usuário e id
                             System.out.println("Busca por nome de usuário e id");
                             f = new Funcionario(TextFieldNomeUsuario.getText(), Integer.parseInt(TextFieldID.getText()));
                             buscarfunc = funcionario.buscarNomeFuncionarioeID(f);
                            }else if ((TextFieldID.getText().length() == 0) && (TextFieldNomeUsuario.getText().length() != 0)){
                             // busca por nome de usuário 
                             f = new Funcionario(TextFieldNomeUsuario.getText());
                             System.out.println("busca por nome de usuário");
                             buscarfunc = funcionario.buscarNomeFuncionario(f);
                            }else if ((TextFieldID.getText().length() != 0) && (TextFieldNomeUsuario.getText().length() == 0)){
                             // busca por id
                             f = new Funcionario(Integer.parseInt(TextFieldID.getText()));
                             System.out.println("busca por id");
                             buscarfunc = funcionario.buscar(f);
                             }
                        } catch (SQLException ex) {
                            Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this,"Problema de conxão com o banco.\n"+ex,"Erro no acesso ao banco",JOptionPane.ERROR_MESSAGE);
                            
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this,"Problema de acesso a classe do banco.\n"+ex,"Erro no acesso a classe banco",JOptionPane.ERROR_MESSAGE);
                        }

                        if (buscarfunc != null ) {
                            mostra(buscarfunc);
                            ButtonCadastra.setEnabled(false);
                            ButtonConsulta.setEnabled(false);
                            ButtonAltera.setEnabled(true);
                            ButtonExclui.setEnabled(true);
                        }else JOptionPane.showMessageDialog(this.TextFieldID,"Funcionário não encontrado.","Busca sem sucesso",JOptionPane.ERROR_MESSAGE);
                
                } else JOptionPane.showMessageDialog(this.TextFieldID,"Campo ID e/ou Nome Usuário  estão vazios","Busca inválida",JOptionPane.ERROR_MESSAGE);
            }
        }else {
            Editavel();
            limpar();
        }
    }//GEN-LAST:event_ButtonConsultaActionPerformed

    private void ButtonExcluiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExcluiActionPerformed
        // TODO add your handling code here:
        int resposta;
        boolean registrado= false;
        if (ButtonExclui.isEnabled()){
            if (TextFieldID.getText() != null && TextFieldNomeUsuario.getText() != null){
                resposta = JOptionPane.showConfirmDialog(this.TextFieldID, "Voçê realmente deseja excluir cadastro do funcionário.", "Confirmação de exclusão de funcionário" , JOptionPane.WARNING_MESSAGE);
                if (resposta == JOptionPane.YES_OPTION){
                    Funcionario buscarfunc = null;
                        try {
                            // busca por id
                             f = new Funcionario(Integer.parseInt(TextFieldID.getText()));
                             System.out.println("busca por id para exclusão de funcionário.");
                             registrado = funcionario.excluir(f);
                             
                        } catch (SQLException ex) {
                            Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this,"Problema de conxão com o banco.\n"+ex,"Erro no acesso ao banco",JOptionPane.ERROR_MESSAGE);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this,"Problema de acesso a classe do banco.\n"+ex,"Erro no acesso a classe banco",JOptionPane.ERROR_MESSAGE);
                        }
                        
                        if (registrado){
                            JOptionPane.showMessageDialog(this,"Cadastro efetuado com sucesso ","Cadastro efetuado",JOptionPane.INFORMATION_MESSAGE);
                            limpar();
                            Editavel();
                            ButtonCadastra.setEnabled(true);
                            ButtonConsulta.setEnabled(true);
                            ButtonAltera.setEnabled(false);
                            ButtonExclui.setEnabled(false);
                        }
                        else JOptionPane.showMessageDialog(this,"Cadastro não efetuado.","Cadastro não efetuado",JOptionPane.ERROR_MESSAGE);
                        
                        
                } else JOptionPane.showMessageDialog(this.TextFieldID,"Campo ID e/ou Nome Usuário  estão vazios","Busca inválida",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ButtonExcluiActionPerformed

    private void ButtonAlteraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAlteraActionPerformed
        // TODO add your handling code here:
        int resposta;
        String senhas = new String();
        boolean registrado =  false;
        int id = Integer.parseInt(TextFieldID.getText());
        System.out.println("valor do id"+ id);
        if ((!TextFieldID.isEditable()) && (!TextFieldNomeUsuario.isEditable())){
            if (TextFieldID.getText().length() != 0 ){ 
                resposta = JOptionPane.showConfirmDialog(this.TextFieldID, "Voçê realmente deseja Alterar cadastro do cliente", "Confirmação de Alteração de dados do cliente" , JOptionPane.WARNING_MESSAGE);
                if (resposta == JOptionPane.YES_OPTION){
                    System.out.println("indo para alteração de cadastro.");
                    registrado = altera();
                    if (registrado)JOptionPane.showMessageDialog(this,"Alteração efetuada com sucesso ","Alteração efetuado",JOptionPane.INFORMATION_MESSAGE);
                    else JOptionPane.showMessageDialog(this,"Alteração não efetuada.","Alteração não efetuada",JOptionPane.ERROR_MESSAGE);
                    
                    
                }
            }
        }else Editavel();
    }//GEN-LAST:event_ButtonAlteraActionPerformed

    private void TextFieldDtAdmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldDtAdmFocusGained
        // TODO add your handling code here:
        if (TextFieldNomeUsuario.getText().length()== 0)TextFieldNomeUsuario.requestFocus();
        
    }//GEN-LAST:event_TextFieldDtAdmFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FuncionarioCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FuncionarioCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FuncionarioCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FuncionarioCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FuncionarioCRUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAltera;
    private javax.swing.JButton ButtonCadastra;
    private javax.swing.JButton ButtonConsulta;
    private javax.swing.JButton ButtonExclui;
    private javax.swing.JButton ButtonLimpar;
    private javax.swing.JLabel LabelDataAdmissao;
    private javax.swing.JLabel LabelID;
    private javax.swing.JLabel LabelNome;
    private javax.swing.JLabel LabelNomeUsuario;
    private javax.swing.JLabel LabelSalario;
    private javax.swing.JLabel LabelSenha;
    private javax.swing.JPasswordField PasswordFieldSenha;
    private javax.swing.JRadioButton RadioButtonFuncionario;
    private javax.swing.JRadioButton RadioButtonGerente;
    private javax.swing.JTextField TextFieldDtAdm;
    private javax.swing.JTextField TextFieldID;
    private javax.swing.JTextField TextFieldNome;
    private javax.swing.JTextField TextFieldNomeUsuario;
    private javax.swing.JTextField TextFieldSalario;
    private javax.swing.ButtonGroup buttonGroupFuncionario;
    private javax.swing.ButtonGroup buttonGroupGerente;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void limpar() {
        TextFieldID.setText(null); 
        TextFieldNomeUsuario.setText(null);
        TextFieldNome.setText(null);
        TextFieldDtAdm.setText(null);
        TextFieldSalario.setText(null);
        PasswordFieldSenha.setText(null);
    }
    /**
     * Deixar campos editáveis de acordo com padrão
     */
    public void Editavel(){
            if (!(TextFieldID.isEditable()) && (TextFieldNome.isEditable())){
                TextFieldID.setBackground(Color.white);
                TextFieldID.setEditable(true);
                TextFieldNome.setBackground(Color.gray);  
                TextFieldNome.setEditable(false);
                TextFieldDtAdm.setBackground(Color.gray);  
                TextFieldDtAdm.setEditable(false);
                TextFieldSalario.setBackground(Color.gray);  
                TextFieldSalario.setEditable(false);
                PasswordFieldSenha.setBackground(Color.gray);  
                PasswordFieldSenha.setEditable(false);
                TextFieldNomeUsuario.setBackground(Color.white); 
                TextFieldNomeUsuario.setEditable(true);

            }else {
                TextFieldID.setBackground(Color.gray);
                TextFieldID.setEditable(false);
                TextFieldNome.setBackground(Color.white);  
                TextFieldNome.setEditable(true);
                TextFieldDtAdm.setBackground(Color.white);  
                TextFieldDtAdm.setEditable(true);
                TextFieldSalario.setBackground(Color.white);  
                TextFieldSalario.setEditable(true);
                PasswordFieldSenha.setBackground(Color.white);  
                PasswordFieldSenha.setEditable(true);
                TextFieldNomeUsuario.setBackground(Color.gray   ); 
                TextFieldNomeUsuario.setEditable(false);

            }

        }
   public boolean matchesOnlyText(String text) {
    return text.matches("[A-Z_a-z_À-ú\\s\\p{L}]+");
    }
    /**
     *
     * @param str
     * @return  primeira letra de cada palavra com em maiúscula exceto para sílabas
     */
    public static String toTitledCase(String str){

    String[] words = str.split(" ");
    StringBuilder sb = new StringBuilder();
  
    for(int i = 0; i < words.length; i++){
        String[] word= words[i].split("\\s");
        if (words[i].length() > 2){
            for (int y = 0;y<word.length;y++){
            sb.append(word[y].substring(0, 1).toUpperCase() + word[y].substring(1).toLowerCase());
            sb.append(" ");  
            }
        } else {
            sb.append(words[i].toLowerCase());
            sb.append(" ");        
        }
    }

    return sb.toString().substring (0, sb.length() - 1);
    }
    /**
     * Gera nome de usuário padronizado para o sistema.
     * @param nome
     * @return 
     */
    public String GeraUsuario(String nome){
        String[] words = nome.split(" ");
        return words[0] +"."+ words[words.length-1];
        
    }
    /**
     * Converte valor real de vírgula para ponto.
     * @param valor
     * @return 
     */
    public double ConverteVirgula(String valor){
        String replace = valor.replace(",",".");
        try{
            return Double.parseDouble(replace);
        }catch(NumberFormatException e){
            return 0.0 ;
        }
        
        
    }
    public String ConvertePonto(double valor){
        String replace = Double.toString(valor);
         return replace = replace.replace(".",",");
    }
    /**
     * Efetua cadastro de funcionário no sistema podendo ser gerente ou  Atendente
     * @return valida true or false
     */
    private boolean cadastra()  {
        boolean valida = false;
                //Verifica qual radio buton esta selecionado.
                if (!RadioButtonFuncionario.isSelected() && RadioButtonGerente.isSelected()){
                    try {
                        //Criação de gerente
                        System.out.println("Gerando Gerente.");
                        g = new Gerente(
                                0,
                                0,
                                0,
                                TextFieldNome.getText(),
                                TextFieldNomeUsuario.getText(),
                                d.StringtoDate(TextFieldDtAdm.getText()),
                                Double.parseDouble(TextFieldSalario.getText()),
                                String.copyValueOf(PasswordFieldSenha.getPassword()),
                                true
                                );
                        System.out.println("Criado Gerente");
                    } catch (ParseException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conversão de data\nData errada"+ ex,"Data inválida",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    }
                    // registro de gerente no banco.
                    System.out.println("registrando no banco.");
                    try {
                        valida = funcionario.inserir(g);
                        System.out.println("registrado no banco");
                    } catch (SQLException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this," Classe não encontrada.\n"+ ex,"Classe em banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (java.lang.NumberFormatException ex){
                    JOptionPane.showMessageDialog(this,"Problema de conversão.\n"+ ex,"erro conversão",JOptionPane.ERROR_MESSAGE);
                    valida = false;
                    }catch (NullPointerException ex){
                    JOptionPane.showMessageDialog(this,"erro desconhecido.\n"
                            + ex.getClass()
                            +"\n"+ex.getCause()
                            +"\n"+ex.getStackTrace()
                            +"\n"+ex.getSuppressed(),"ERRO",JOptionPane.ERROR_MESSAGE);
                    valida = false;
                    } 
                    
                }else if(RadioButtonFuncionario.isSelected() && !RadioButtonGerente.isSelected()){
                    try {
                        System.out.println("Gerando atendente.");
                        a = new Atendente(
                                0,
                                TextFieldNome.getText(),
                                TextFieldNomeUsuario.getText(),
                                d.StringtoDate(TextFieldDtAdm.getText()),
                                Double.parseDouble(TextFieldSalario.getText()),
                                String.copyValueOf(PasswordFieldSenha.getPassword()),
                                true);
                    } catch (ParseException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conversão de data\nData errada"+ ex,"Data inválida",JOptionPane.ERROR_MESSAGE);
                                valida = false;
                    }
                    // teste de dados
                    System.out.println("dados do atendente.\n"
                            + a.getNome()+"\n"
                            + a.getNomeUsuario()+"\n"
                            + a.getSenha()+"\n"
                            + a.getSalario()+"\n"
                            + a.getDataAdmissao()+"\n"
                            + a.isGerente()+"\n"
                            + a.isTrocasenha()+"\n"
                            + "\n");
                    // Cadastro de funcionário no sistema.
                    System.out.println("registrando no banco.");
                    try {
                        valida = funcionario.inserir(a);
                        System.out.println("registrado no banco");
                    } catch (SQLException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this," Classe não encontrada.\n"+ ex,"Classe em banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (java.lang.NumberFormatException ex){
                    JOptionPane.showMessageDialog(this,"Problema de conversão.\n"+ ex,"erro conversão",JOptionPane.ERROR_MESSAGE);
                    valida = false;
                    }catch (NullPointerException ex){
                    JOptionPane.showMessageDialog(this,"erro desconhecido.\n"
                            + ex.getClass()
                            +"\n"+ex.getCause()
                            +"\n"+ex.getStackTrace()
                            +"\n"+ex.getSuppressed(),"ERRO",JOptionPane.ERROR_MESSAGE);
                    valida = false;
                    }
                }
                  
     
     return valida;
    }

    private void mostra(Funcionario f) {
        TextFieldID.setText(String.valueOf(f.getId()));
        TextFieldNomeUsuario.setText(f.getNomeUsuario());
        TextFieldNome.setText(f.getNome());
        TextFieldSalario.setText(String.valueOf(f.getSalario()));
        try {
            TextFieldDtAdm.setText(DateValidator.DatetoString(f.getDataAdmissao()));
        } catch (ParseException ex) {
            Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this.TextFieldDtAdm,"Data de nascimento inválida","Data de Nascimento",JOptionPane.ERROR_MESSAGE);
        }
        if (f.isGerente() == true) RadioButtonGerente.setSelected(true);
        else if (f.isGerente() == false) RadioButtonFuncionario.setSelected(true);
        PasswordFieldSenha.setText(f.getSenha());
    }
    
private boolean altera (){
    Gerente g = null;
    Atendente a = null;
        boolean valida = false;
                //Verifica qual radio buton esta selecionado.
                if (!RadioButtonFuncionario.isSelected() && RadioButtonGerente.isSelected()){
                    try {
                        //Criação de gerente
                        System.out.println("Gerando Gerente.");
                        g = new Gerente(
                                0,
                                0,
                                0,
                                TextFieldNome.getText(),
                                TextFieldNomeUsuario.getText(),
                                d.StringtoDate(TextFieldDtAdm.getText()),
                                Double.parseDouble(TextFieldSalario.getText()),
                                String.copyValueOf(PasswordFieldSenha.getPassword()),
                                true,
                                Integer.parseInt(TextFieldID.getText())
                                );
                        System.out.println("Criado Gerente");
                    } catch (ParseException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this.TextFieldDtAdm,"Data de nascimento inválida","Data de Nascimento",JOptionPane.ERROR_MESSAGE);
                        
                        valida = false;
                    }
                    // registro de gerente no banco.
                    System.out.println("Gerando Gerente para alteração."
                            + g.getNome()+"\n"
                            + g.getNome()+"\n"
                            + g.getSenha()+"\n"
                            + g.getId()+"\n"
                            + g.isGerente()+"\n"
                            + g.isTrocasenha()+"\n"
                            + g.getDataAdmissao()+"\n"
                            );
                    System.out.println("registrando no banco.");
                    try {
                        valida = funcionario.alterar(g);
                        System.out.println("registrado no banco");
                    } catch (SQLException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this," Classe não encontrada.\n"+ ex,"Classe em banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (java.lang.NumberFormatException ex){
                    JOptionPane.showMessageDialog(this,"Problema de conversão.\n"+ ex,"erro conversão",JOptionPane.ERROR_MESSAGE);
                    valida = false;
//                    }catch (NullPointerException ex){
//                    JOptionPane.showMessageDialog(this,"erro desconhecido.\n"
//                            + ex.getClass()
//                            +"\n"+ex.getCause()
//                            +"\n"+ex.getStackTrace()
//                            +"\n"+ex.getSuppressed(),"ERRO",JOptionPane.ERROR_MESSAGE);
//                    valida = false;
                    }
                    
                }else if(RadioButtonFuncionario.isSelected() && !RadioButtonGerente.isSelected()){
                    try {
                        System.out.println("Gerando atendente.");
                        a = new Atendente(
                                0,
                                TextFieldNome.getText(),
                                TextFieldNomeUsuario.getText(),
                                d.StringtoDate(TextFieldDtAdm.getText()),
                                Double.parseDouble(TextFieldSalario.getText()),
                                String.copyValueOf(PasswordFieldSenha.getPassword()),
                                true,
                                Integer.parseInt(TextFieldID.getText())
                                );
                    } catch (ParseException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conversão de data\nData errada"+ ex,"Data inválida",JOptionPane.ERROR_MESSAGE);
                                valida = false;
                    }
                    // Cadastro de funcionário no sistema.
                    System.out.println("Gerando Atendente para alteração."
                            + a.getNome()+"\n"
                            + a.getNome()+"\n"
                            + a.getSenha()+"\n"
                            + a.getId()+"\n"
                            + a.isGerente()+"\n"
                            + a.isTrocasenha()+"\n"
                            + a.getDataAdmissao()+"\n"
                            );
                    System.out.println("registrando no banco.");
                    try {
                        valida = funcionario.alterar(a);
                        System.out.println("registrado no banco");
                    } catch (SQLException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FuncionarioCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this," Classe não encontrada.\n"+ ex,"Classe em banco",JOptionPane.ERROR_MESSAGE);
                        valida = false;
                    }catch (java.lang.NumberFormatException ex){
                    JOptionPane.showMessageDialog(this,"Problema de conversão.\n"+ ex,"erro conversão",JOptionPane.ERROR_MESSAGE);
                    valida = false;
                    
//                    }catch (NullPointerException ex){
//                    JOptionPane.showMessageDialog(this,"erro desconhecido.\n"
//                            + ex.getClass()
//                            +"\n"+ex.getCause()
//                            +"\n"+ex.getStackTrace()
//                            +"\n"+ex.getSuppressed(),"ERRO",JOptionPane.ERROR_MESSAGE);
//                    valida = false;

                    }
                return valida;
                }
                  
     
     return valida;
}

}
