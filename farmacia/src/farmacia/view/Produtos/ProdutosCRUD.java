/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmacia.view.Produtos;

import Verifica.DateValidator;
import farmacia.DAO.ProdutosDAO;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Produtos;

/**
 *
 * @author Alvaro Pereira do Nascimento.
 */
public class ProdutosCRUD extends javax.swing.JFrame {

    /**
     * Creates new form ProdutosdCRUD
     */
    DateValidator d = new DateValidator();
    ProdutosDAO produto = new  ProdutosDAO();
    Produtos p ;
    
    public ProdutosCRUD() {
        try {
            initComponents();
            TextAreaDescricao.setLineWrap(true);
            geracombo();
        } catch (SQLException ex) {
            Logger.getLogger(ProdutosCRUD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProdutosCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelNome = new javax.swing.JLabel();
        TextFieldNome = new javax.swing.JTextField();
        LabelID = new javax.swing.JLabel();
        TextFieldID = new javax.swing.JTextField();
        TextFieldValor = new javax.swing.JTextField();
        LabelDescricao = new javax.swing.JLabel();
        LabelValor = new javax.swing.JLabel();
        ComboBoxProdutos = new javax.swing.JComboBox<>();
        ButtonCadastra = new javax.swing.JButton();
        ButtonAltera = new javax.swing.JButton();
        ButtonExclui = new javax.swing.JButton();
        ButtonLimpa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextAreaDescricao = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        TextFieldValidade = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro de produtos");
        setResizable(false);

        LabelNome.setText("Nome:");

        TextFieldNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldNomeFocusLost(evt);
            }
        });

        LabelID.setText("ID:");

        TextFieldID.setEditable(false);
        TextFieldID.setBackground(new java.awt.Color(102, 102, 102));

        TextFieldValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldValorFocusLost(evt);
            }
        });

        LabelDescricao.setText("Descrição:");

        LabelValor.setText("Valor:");

        ComboBoxProdutos.setEditable(true);
        ComboBoxProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxProdutosActionPerformed(evt);
            }
        });

        ButtonCadastra.setText("Cadastra");
        ButtonCadastra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCadastraActionPerformed(evt);
            }
        });

        ButtonAltera.setText("Altera");

        ButtonExclui.setText("Exclui");

        ButtonLimpa.setText("Limpar");

        TextAreaDescricao.setColumns(20);
        TextAreaDescricao.setRows(5);
        TextAreaDescricao.setWrapStyleWord(true);
        TextAreaDescricao.setBorder(null);
        TextAreaDescricao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextAreaDescricaoFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(TextAreaDescricao);

        jLabel1.setText("Validade:");

        TextFieldValidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldValidadeFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(ButtonCadastra)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ComboBoxProdutos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonAltera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonExclui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonLimpa)
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(LabelID)
                    .addComponent(LabelNome)
                    .addComponent(LabelDescricao)
                    .addComponent(LabelValor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextFieldValidade, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelID)
                    .addComponent(TextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelNome)
                    .addComponent(TextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelDescricao)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelValor)
                    .addComponent(TextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TextFieldValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(ComboBoxProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonCadastra)
                    .addComponent(ButtonAltera)
                    .addComponent(ButtonExclui)
                    .addComponent(ButtonLimpa))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextFieldValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldValorFocusLost
        // TODO add your handling code here:
        if (TextFieldValor.isEditable()){
            if (TextAreaDescricao.getText().length()!= 0 && TextAreaDescricao.getText().length() < 251 ){
                if (TextFieldValor.getText().length() != 0){
                    if (ConverteVirgula(TextFieldValor.getText())== 0.0){
                        JOptionPane.showMessageDialog(this.TextFieldValor, "Campo Valor possui dados inválidos.","Valor", JOptionPane.ERROR_MESSAGE);
                        TextFieldValor.requestFocus();
                    }else {
                        double registra = ConverteVirgula(TextFieldValor.getText());
                        TextFieldValor.setText(String.valueOf(registra));                        
                    }
                }else {
                    JOptionPane.showMessageDialog(this.TextFieldValor, "Campo Valor esta vazio.","Valor", JOptionPane.ERROR_MESSAGE);
                    TextFieldValor.requestFocus();
                    }   
            }TextAreaDescricao.requestFocus();
             
        }
        
    }//GEN-LAST:event_TextFieldValorFocusLost

    private void TextFieldNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldNomeFocusLost
        // TODO add your handling code here:
        if (TextFieldNome.isEditable()){
            if (TextFieldNome.getText().length() != 0){
                if (matchesOnlyText(TextFieldValor.getText())){
                    JOptionPane.showMessageDialog(this.TextFieldNome, "Campo nome possui dados inválidos.","Nome", JOptionPane.ERROR_MESSAGE);
                    TextFieldNome.requestFocus();
                }
            }else{
                JOptionPane.showMessageDialog(this.TextFieldNome, "Campo nome esta vazio..","Nome", JOptionPane.ERROR_MESSAGE);
                TextFieldNome.requestFocus();
            }  
        }
    }//GEN-LAST:event_TextFieldNomeFocusLost

    private void TextAreaDescricaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextAreaDescricaoFocusLost
        // TODO add your handling code here:
        if (TextAreaDescricao.isEditable()){
            if (TextFieldNome.getText().length() != 0){
                if (TextAreaDescricao.getText().length() >= 251){
                    JOptionPane.showMessageDialog(this.TextAreaDescricao, "Campo Descriçãop maior que o esperado\n simplifique os dados informados.","Descrição muito grande", JOptionPane.ERROR_MESSAGE);
                    TextAreaDescricao.requestFocus();
                }else if(TextAreaDescricao.getText().length()== 0){
                    JOptionPane.showMessageDialog(this.TextAreaDescricao, "Campo Descrição esta vazio.","Descrição vazia", JOptionPane.ERROR_MESSAGE);
                    TextAreaDescricao.requestFocus();
                }
            }else TextFieldNome.requestFocus();
              
        }
    }//GEN-LAST:event_TextAreaDescricaoFocusLost

    private void ComboBoxProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxProdutosActionPerformed
        try {
            // TODO add your handling code here:
            p = (Produtos) ComboBoxProdutos.getSelectedItem();
            mostra(p);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this.ComboBoxProdutos, "problema de incrmento na combo.","Descrição vazia", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ProdutosCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ComboBoxProdutosActionPerformed

    private void ButtonCadastraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCadastraActionPerformed
        boolean cadastrou = false;
        try {
            // TODO add your handling code here:
            p = new Produtos(
                    Double.parseDouble(TextFieldValor.getText()),
                    TextFieldNome.getText(),
                    TextAreaDescricao.getText(),
                    d.StringtoDate(TextFieldValidade.getText())
            );
        } catch (ParseException ex) {
            Logger.getLogger(ProdutosCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            cadastrou = produto.inserir(p);
        } catch (SQLException ex) {
            Logger.getLogger(ProdutosCRUD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,"Problema de conexão com o banco.\n"+ ex,"erro Banco",JOptionPane.ERROR_MESSAGE);
            cadastrou = false;
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProdutosCRUD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,"Problema de acesso a classe do banco.\n"+ex,"Erro no acesso a classe banco",JOptionPane.ERROR_MESSAGE);
            cadastrou = false;
            if (cadastrou)JOptionPane.showMessageDialog(this,"Cadastro efetuado com sucesso ","Cadastro efetuado",JOptionPane.INFORMATION_MESSAGE);
            else JOptionPane.showMessageDialog(this,"Cadastro não efetuado.","Cadastro não efetuado",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_ButtonCadastraActionPerformed

    private void TextFieldValidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldValidadeFocusLost
        // TODO add your handling code here:
        if (TextFieldValidade.isEditable()){
            int date=0;
            if(TextFieldValor.getText().length() != 0){
                   if (TextFieldValidade.getText().length()> 3 || TextFieldValidade.getText().length()< 11){
                    if(TextFieldValidade.getText().length()== 8){
                        try {
                          date = Integer.parseInt(TextFieldValidade.getText());
                            int ano = date%10000;
                            int dia = date/1000000;
                            date /= 10000;
                            int mes = date%100;
                            if (mes <10){
                              TextFieldValidade.setText(dia+"/0"+mes+"/"+ano);  
                            }
                           else TextFieldValidade.setText(dia+"/"+mes+"/"+ano);
                        }catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                           TextFieldValidade.requestFocus();
                           TextFieldValidade.setText("dd/mm/aaaa");
                           TextFieldValidade.setText("dia/mes/ano");
                           TextFieldValidade.selectAll();
                        }
                    }else if (TextFieldValidade.getText().length()== 10){
                            if(!d.data(TextFieldValidade.getText())){
                               JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                               TextFieldValidade.requestFocus();
                               TextFieldValidade.setText("dd/mm/aaaa");
                               TextFieldValidade.setText("dia/mes/ano");
                               TextFieldValidade.selectAll();
                            }
                    }else if (TextFieldValidade.getText().length()== 6){
                        try {
                            date = Integer.parseInt(TextFieldValidade.getText());
                            int ano = date%100;
                            int dia = date/10000;
                            date /= 100;
                            int mes = date%100;
                            if (ano < 100 && ano > 60 ) ano+=1900;
                            else ano += 2000;
                            TextFieldValidade.setText(dia+"/0"+mes+"/"+ano);
                        } catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                           TextFieldValidade.requestFocus();
                           TextFieldValidade.setText("dd/mm/aaaa");
                           TextFieldValidade.setText("dia/mes/ano");
                           TextFieldValidade.selectAll();
                        }
                    }else if (TextFieldValidade.getText().length()== 4){
                        try {
                            date = Integer.parseInt(TextFieldValidade.getText());
                            int ano = date%100;
                            int dia = date/1000;
                            date /= 100;
                            int mes = date%10;
                            if (mes <10 && dia < 10&& (ano < 100 && ano > 60 )){
                                    ano+=1900;
                                    TextFieldValidade.setText("0"+dia+"/0"+mes+"/"+ano);  
                                }
                        } catch (NumberFormatException e) {
                           JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                           TextFieldValidade.requestFocus();
                           TextFieldValidade.setText("dd/mm/aaaa");
                           TextFieldValidade.setText("dia/mes/ano");
                           TextFieldValidade.selectAll();
                        }

                    }else if (TextFieldValidade.getText().length()== 5){
                       JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                       TextFieldValidade.requestFocus();
                       TextFieldValidade.setText("dd/mm/aaaa");
                       TextFieldValidade.setText("dia/mes/ano");
                       TextFieldValidade.selectAll();
                    }else {
                        JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                        TextFieldValidade.requestFocus();
                        TextFieldValidade.setText("dia/mes/ano");
                        TextFieldValidade.selectAll();
                    }   
                    }else {
                    JOptionPane.showMessageDialog(this.TextFieldValidade, "Campo data de Validade  com formato inválido.","Data de Validade ", JOptionPane.ERROR_MESSAGE);
                    TextFieldValidade.requestFocus();
                     } 
                }else TextFieldValor.requestDefaultFocus();
            }
    }//GEN-LAST:event_TextFieldValidadeFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProdutosCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProdutosCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProdutosCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProdutosCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProdutosCRUD().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAltera;
    private javax.swing.JButton ButtonCadastra;
    private javax.swing.JButton ButtonExclui;
    private javax.swing.JButton ButtonLimpa;
    private javax.swing.JComboBox<Object> ComboBoxProdutos;
    private javax.swing.JLabel LabelDescricao;
    private javax.swing.JLabel LabelID;
    private javax.swing.JLabel LabelNome;
    private javax.swing.JLabel LabelValor;
    private javax.swing.JTextArea TextAreaDescricao;
    private javax.swing.JTextField TextFieldID;
    private javax.swing.JTextField TextFieldNome;
    private javax.swing.JTextField TextFieldValidade;
    private javax.swing.JTextField TextFieldValor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    public double ConverteVirgula(String valor){
        String replace = valor.replace(",",".");
        try{
            return Double.parseDouble(replace);
        }catch(NumberFormatException e){
            return 0.0 ;
        }
    }
    public String ConvertePonto(double valor){
        String replace = Double.toString(valor);
         return replace = replace.replace(".",",");
    }    
    public boolean matchesOnlyText(String text) {
        return text.matches("[A-Z_a-z_À-ú\\s\\p{L}]+");
    }
    public void geracombo() throws SQLException, ClassNotFoundException{
        ArrayList<Produtos> produtos = (ArrayList<Produtos>) produto.listarcombo();
        Produtos p = null;
        for(int i = 0;i<produtos.size(); i++ ){  
            p =  produtos.get(i);  
           ComboBoxProdutos.addItem(p.toString());  
        }
    }
    
    public void Editavel(){
        if (!(TextFieldID.isEditable())){
            TextFieldID.setBackground(Color.white);
            TextFieldID.setEditable(true);
            TextFieldNome.setBackground(Color.white);  
            TextFieldNome.setEditable(true);
            TextFieldValor.setBackground(Color.gray);  
            TextFieldValor.setEditable(false);
            TextAreaDescricao.setBackground(Color.gray);  
            TextAreaDescricao.setEditable(false);
            TextFieldValidade.setBackground(Color.gray);  
            TextFieldValidade.setEditable(false);

        }else {
            TextFieldID.setBackground(Color.gray);
            TextFieldID.setEditable(false);
            TextFieldNome.setBackground(Color.white);  
            TextFieldNome.setEditable(true);
            TextFieldValor.setBackground(Color.white);  
            TextFieldValor.setEditable(true);
            TextAreaDescricao.setBackground(Color.white);  
            TextAreaDescricao.setEditable(true);
            TextFieldValidade.setBackground(Color.white);  
            TextFieldValidade.setEditable(true);
        }

        }
    public void mostra(Produtos p) throws ParseException{
        TextFieldID.setText(String.valueOf(p.getId()));
        TextFieldNome.setText(p.getNome());
        TextAreaDescricao.setText(p.getDescricao());
        TextFieldValor.setText(String.valueOf(p.getPreco()));
        TextFieldValidade.setText(DateValidator.DatetoString(p.getValidade()));
    }
}
